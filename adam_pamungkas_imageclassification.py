# -*- coding: utf-8 -*-
"""adam_pamungkas_ImageClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ers3QAKUuZKXLR3N7nvIBhneSFCgcGSc
"""

## version tensorflow
import tensorflow as tf
print(tf.__version__)

# mempersiapkan dataset
!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

# ekstrak data
import zipfile, os
local_zip = 'rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/rockpaperscissors'
dataset_dir = os.path.join('/tmp/rockpaperscissors/rps-cv-images')
rock_dir = os.path.join('/tmp/rockpaperscissors/rock')
paper_dir = os.path.join('/tmp/rockpaperscissors/paper')
scissors_dir = os.path.join('/tmp/rockpaperscissors/scissors')

print(len(os.listdir(rock_dir)))
print(len(os.listdir(paper_dir)))
print(len(os.listdir(scissors_dir)))

# augmentasi untuk memperbanyak data latih
# proses augmentasi
from tensorflow.keras.preprocessing.image import ImageDataGenerator
val_size=0.4

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    brightness_range=[0.2, 1.0],
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip=True,
    fill_mode = 'nearest',
    validation_split=val_size
)

test_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    brightness_range=[0.2, 1.0],
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip=True,
    fill_mode = 'nearest',
    validation_split=val_size
)

# siapkan data latih dan validasi
train_generator = train_datagen.flow_from_directory(
    dataset_dir,
    target_size=(150,150),
    batch_size=16,
    class_mode='categorical',
    shuffle=True,
    subset='training'
)

validation_generator = test_datagen.flow_from_directory(
    dataset_dir,
    target_size=(150, 150),
    batch_size=16,
    class_mode='categorical',
    shuffle=False,
    subset='validation'
)

# membangun model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),

    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

"""**Penggunaan Learning Rate Schedule**"""

def scheduler(epoch, lr):
  if epoch < 5:
    return lr
  else:
    return lr * tf.math.exp(-0.1)

lr_schedule = tf.keras.callbacks.LearningRateScheduler(scheduler, verbose=1)
tb_callback = tf.keras.callbacks.TensorBoard(
    log_dir = 'logs', histogram_freq=0, write_graph = True, write_images=False,
    update_freq='epoch', embeddings_freq=0, embeddings_metadata=None
)

model.summary()

from tensorflow.keras.optimizers import Adam
Adam(learning_rate=0.00146, name='Adam')
model.compile(loss='binary_crossentropy',
              optimizer= 'Adam',
              metrics=['accuracy'])

batch_size = 16

history = model.fit(
    train_generator,
    steps_per_epoch=1314 // batch_size,
    epochs=10,
    validation_data=validation_generator,
    validation_steps=874 // batch_size,
    verbose=1,
    callbacks =[lr_schedule, tb_callback]
)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():
  # predicting images
  path=fn
  img = image.load_img(path, target_size=(150, 150))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
  classes = model.predict(images, batch_size=16)
  
  print(fn)
  if classes[0][0] == 1:
    print('Paper')
  elif classes[0][1] == 1:
    print('Rock')
  else:
    print('Scissor')

# Mengambil Nilai Accuracy 
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
# Mengambil Nilai Loss 
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

# Plot Accruracy
plt.plot(epochs, acc, 'r', label='Train accuracy')
plt.plot(epochs, val_acc, 'g', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()
plt.show()

# Plot Loss
plt.plot(epochs, loss, 'r', label='Train loss')
plt.plot(epochs, val_loss, 'g', label='Validation loss')
plt.title('Training and validation loss')
plt.legend(loc=0)
plt.figure()
plt.show()

